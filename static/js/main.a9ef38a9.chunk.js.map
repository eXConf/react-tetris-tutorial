{"version":3,"sources":["img/bg.png","gameHelpers.js","components/styles/StyledTetris.js","tetrominos.js","hooks/useStage.js","components/styles/StyledCell.js","components/Cell.js","components/styles/StyledStage.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/styles/StyledStartButton.js","components/StartButton.js","components/Tetris.js","hooks/usePlayer.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","StyledTetrisWrapper","styled","div","bgImage","StyledTetris","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","randTetromino","Math","floor","random","useStage","resetPlayer","useState","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","map","row","cell","forEach","value","collided","reduce","accum","findIndex","prev","unshift","push","sweepRows","StyledCell","props","type","React","memo","StyledStage","height","width","Stage","key","StyledDisplay","gameOver","Display","text","StyledStartButton","button","StartButton","callback","onClick","Tetris","dropTime","setDropTime","setGameOver","setPlayer","rotate","matrix","dir","rotatedTetro","_","index","col","reverse","useCallback","STAGE_WIDTH","clonedPlayer","JSON","parse","stringify","offset","usePlayer","updatePlayerPos","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","movePlayer","drop","console","log","move","keyCode","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","onKeyUp","keyUp","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a9ef38a9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.2810fe6b.png\";","export const STAGE_WIDTH = 12\r\nexport const STAGE_HEIGHT = 20\r\n\r\nexport const createStage = () => \r\nArray.from(Array(STAGE_HEIGHT), () => \r\n    new Array(STAGE_WIDTH).fill([0, 'clear'])\r\n)\r\n\r\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\r\n    for (let y = 0; y < player.tetromino.length; y++) {\r\n        for (let x = 0; x < player.tetromino[y].length; x++) {\r\n\r\n            // 1. Check that we're on an actual tetromino cell            \r\n            if (player.tetromino[y][x] !== 0) {\r\n                if (\r\n                    // Check that our move is inside the game field height (y)\r\n                    // 2. Also shouldn't go below bottom of the game field\r\n                    !stage[y + player.pos.y + moveY] ||\r\n                    // 3. Check that out move is inside the game field width (x)\r\n                    !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\r\n                    // 4. Check that the cell we're moving to isn't set to clear\r\n                    stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !== 'clear'\r\n                ) {\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import styled from 'styled-components'\r\n\r\nimport bgImage from '../../img/bg.png'\r\n\r\nexport const StyledTetrisWrapper = styled.div`\r\n    width: 100vw;\r\n    height: 100vh;\r\n    background: url(${bgImage}) #000;\r\n    background-size: cover;\r\n    overflow: hidden;\r\n`\r\n\r\nexport const StyledTetris = styled.div`\r\n    display: flex;\r\n    align-items: flex-start;\r\n    padding: 40px;\r\n    margin: 0 auto;\r\n    max-width: 900px;\r\n\r\n    aside {\r\n        width: 100%;\r\n        max-width: 200px;\r\n        display: block;\r\n        padding: 0 20px;\r\n    }\r\n`","export const TETROMINOS = {\r\n    0: { shape: [[0]], color: '0, 0, 0' },\r\n    I: {\r\n        shape: [\r\n                [0, 'I', 0, 0],\r\n                [0, 'I', 0, 0],\r\n                [0, 'I', 0, 0],\r\n                [0, 'I', 0, 0]\r\n                ],\r\n        color: '20, 227, 230'\r\n    },\r\n    J: {\r\n        shape: [\r\n                [0, 'J', 0],\r\n                [0, 'J', 0],\r\n                ['J', 'J', 0]\r\n                ],\r\n        color: '36, 95, 223'\r\n    },\r\n    L: {\r\n        shape: [\r\n                [0, 'L', 0],\r\n                [0, 'L', 0],\r\n                [0, 'L', 'L']\r\n                ],\r\n        color: '223, 173, 36'\r\n    },\r\n    O: {\r\n        shape: [\r\n                ['O', 'O'],\r\n                ['O', 'O']\r\n                ],\r\n        color: '223, 217, 36'\r\n    },\r\n    S: {\r\n        shape: [\r\n                [0, 'S', 'S'],\r\n                ['S', 'S', 0],\r\n                [0, 0, 0]\r\n                ],\r\n        color: '48, 211, 56'\r\n    },\r\n    T: {\r\n        shape: [\r\n                [0, 0, 0],\r\n                ['T', 'T', 'T'],\r\n                [0, 'T', 0]\r\n                ],\r\n        color: '132, 61, 198'\r\n    },\r\n    Z: {\r\n        shape: [\r\n                ['Z', 'Z', 0],\r\n                [0, 'Z', 'Z'],\r\n                [0, 0, 0]\r\n                ],\r\n        color: '227, 78, 78'\r\n    }\r\n} \r\n\r\nexport const randomTetromino = () => {\r\n    const tetrominos = 'IJLOSTZ'\r\n    const randTetromino =\r\n        tetrominos[Math.floor(Math.random() * tetrominos.length)]\r\n    return TETROMINOS[randTetromino]\r\n}","import { useState, useEffect } from 'react'\r\nimport { createStage } from '../gameHelpers'\r\n\r\nexport const useStage = (player, resetPlayer) => {\r\n    const [stage, setStage] = useState(createStage())\r\n    const [rowsCleared, setRowsCleared] = useState(0)\r\n\r\n    useEffect(() => {\r\n        setRowsCleared(0)\r\n\r\n        const sweepRows = newStage => \r\n            newStage.reduce((accum, row) => {\r\n                if (row.findIndex(cell => cell[0] === 0) === -1) {\r\n                    setRowsCleared(prev => prev + 1)\r\n                    accum.unshift(new Array(newStage[0].length).fill([0, 'clear']))\r\n                    return accum\r\n                }\r\n                accum.push(row)\r\n                return accum\r\n            }, [])\r\n        \r\n        const updateStage = prevStage => {\r\n            // First flush the stage\r\n            const newStage = prevStage.map(row =>\r\n                row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell))\r\n            )\r\n\r\n            // Draw the tetromino\r\n            player.tetromino.forEach((row, y) => {\r\n                row.forEach((value, x) => {\r\n                    if (value !== 0) {\r\n                        newStage[y + player.pos.y][x + player.pos.x] = [\r\n                            value,\r\n                            `${player.collided ? 'merged' : 'clear'}`\r\n                        ]\r\n                    }\r\n                })\r\n            })\r\n\r\n            // Check if we collided\r\n            if (player.collided) {\r\n                resetPlayer()\r\n                return sweepRows(newStage)\r\n            }\r\n\r\n            return newStage\r\n        }\r\n\r\n        setStage(prev => updateStage(prev))\r\n\r\n    }, [player, resetPlayer])\r\n\r\n    return [stage, setStage, rowsCleared]\r\n}","import styled from 'styled-components'\r\n\r\nexport const StyledCell = styled.div`\r\n    width: auto;\r\n    background: rgba(${props => props.color}, 0.8);\r\n    border: ${props => (props.type === 0 ? '0px solid' : '4px solid')};\r\n    border-bottom-color: rgba(${props => props.color}, 0.1);\r\n    border-right-color: rgba(${props => props.color}, 1);\r\n    border-top-color: rgba(${props => props.color}, 1);\r\n    border-left-color: rgba(${props => props.color}, 0.3);\r\n`","import React from 'react'\r\nimport { StyledCell } from './styles/StyledCell'\r\nimport { TETROMINOS } from '../tetrominos'\r\n\r\nconst Cell = ({ type }) => (\r\n    <StyledCell type={type} color={TETROMINOS[type].color} />\r\n)\r\n\r\nexport default React.memo(Cell)","import styled from 'styled-components'\r\n\r\nexport const StyledStage = styled.div`\r\n    display: grid;\r\n    grid-template-rows: repeat(\r\n        ${props => props.height}, \r\n        calc(25vw / ${props => props.width})\r\n    );\r\n    grid-template-columns: repeat(${props => props.width}, 1fr);\r\n    grid-gap: 1px;\r\n    border: 2px solid #333;\r\n    width: 100%;\r\n    max-width: 25vw;\r\n    background: #111;\r\n`","import React from 'react'\r\nimport Cell from './Cell'\r\nimport { StyledStage } from './styles/StyledStage'\r\n\r\nconst Stage = ({ stage }) => (\r\n    <StyledStage width={stage[0].length} height={stage.length}>\r\n        {stage.map(row => row.map((cell, x) => <Cell key={x} type={cell[0]} />))}\r\n    </StyledStage>\r\n)\r\n\r\nexport default Stage","import styled from 'styled-components'\r\n\r\nexport const StyledDisplay = styled.div`\r\n    box-sizing: border-box;\r\n    display: flex;\r\n    align-items: center;\r\n    margin: 0 0 20px 0;\r\n    padding: 20px;\r\n    border: 4px solid #333;\r\n    min-height: 30px;\r\n    width: 100%;\r\n    border-radius: 20px;\r\n    color: ${props => (props.gameOver ? 'red' : '#999')};\r\n    background: #000;\r\n    font-family: Pixel, Arial, Helvetica, sans-serif;\r\n    font-size: 0.8rem;\r\n    \r\n`","import React from 'react'\r\nimport { StyledDisplay } from './styles/StyledDisplay'\r\n\r\nconst Display = ({ gameOver, text }) => (\r\n    <StyledDisplay gameOver={gameOver}>{text}</StyledDisplay>\r\n)\r\n\r\nexport default Display","import styled from 'styled-components'\r\n\r\nexport const StyledStartButton = styled.button`\r\n    box-sizing: border-box;\r\n    margin: 0 0 20px 0;\r\n    padding: 20px;\r\n    min-height: 30px;\r\n    width: 100%;\r\n    border-radius: 20px;\r\n    border: none;\r\n    color: white;\r\n    background: #333;\r\n    font-family: Pixel, Arial, Helvetica, sans-serif;\r\n    font-size: 1rem;\r\n    outline: none;\r\n    cursor: pointer;\r\n    `","import React from 'react'\r\nimport { StyledStartButton } from './styles/StyledStartButton'\r\n\r\nconst StartButton = ({ callback }) => (\r\n    <StyledStartButton onClick={callback}>Start Game</StyledStartButton>\r\n)\r\n\r\nexport default StartButton","import React, { useState } from 'react'\r\n\r\nimport { createStage, checkCollision } from '../gameHelpers'\r\n\r\n// Styled components\r\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris'\r\n\r\n// Custom hooks\r\nimport { useInterval } from '../hooks/useInterval'\r\nimport { usePlayer } from '../hooks/usePlayer'\r\nimport { useStage } from '../hooks/useStage'\r\nimport { useGameStatus } from '../hooks/useGameStatus'\r\n\r\n// Components\r\nimport Stage from './Stage'\r\nimport Display from './Display'\r\nimport StartButton from './StartButton'\r\n\r\nconst Tetris = () => {\r\n    const [dropTime, setDropTime] = useState(null)\r\n    const [gameOver, setGameOver] = useState(false)\r\n\r\n    const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer()\r\n    const [stage, setStage, rowsCleared] = useStage(player, resetPlayer)\r\n    const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(rowsCleared)\r\n\r\n    //console.log('re-render')\r\n\r\n    const movePlayer = dir => {\r\n        if (!checkCollision(player, stage, { x: dir, y: 0 })) {\r\n            updatePlayerPos({ x: dir, y: 0 })\r\n        }\r\n    }\r\n\r\n    const startGame = () => {\r\n        // Reset everything\r\n        setStage(createStage())\r\n        resetPlayer()\r\n        setGameOver(false)\r\n        setDropTime(1000)\r\n        setScore(0)\r\n        setRows(0)\r\n        setLevel(0)\r\n        setDropTime(1000 / (level + 1) + 200)\r\n    }\r\n\r\n    const drop = () => {\r\n        // Increase level when player cleares 10 rows\r\n        if (rows > (level + 1) * 10) {\r\n            setLevel(prev => prev + 1)\r\n            // Also increase the speed\r\n            setDropTime(1000 / (level + 1) + 200)\r\n        }\r\n\r\n        if (!checkCollision(player, stage, { x: 0, y: 1 })) {\r\n            updatePlayerPos({ x: 0, y: 1, collided: false })\r\n        } else {\r\n            // Game Over\r\n            if (player.pos.y < 1) {\r\n                console.log('GAME OVER')\r\n                setGameOver(true)\r\n                setDropTime(null)\r\n                return\r\n            }\r\n            updatePlayerPos({ x: 0, y: 0, collided: true })\r\n        }\r\n    }\r\n\r\n    const keyUp = ({ keyCode }) => {\r\n        if (!gameOver) {\r\n            if (keyCode === 40) {\r\n                //console.log('interval on')\r\n                setDropTime(1000 / (level + 1) + 200)\r\n            }\r\n        }\r\n    }\r\n\r\n    const dropPlayer = () => {\r\n        //console.log('interval off')\r\n        setDropTime(null)\r\n        drop()\r\n    }\r\n\r\n    const move = ({ keyCode }) => {\r\n        if (!gameOver) {\r\n            if (keyCode === 37) { movePlayer(-1) }\r\n            else if (keyCode === 39) { movePlayer(1) }\r\n            else if (keyCode === 40) { dropPlayer() }\r\n            else if (keyCode === 38) { playerRotate(stage, 1)}\r\n        }\r\n    }\r\n\r\n    useInterval(() => {\r\n        drop()\r\n    }, dropTime)\r\n\r\n    return (\r\n        <StyledTetrisWrapper role='button' tabIndex='0' onKeyDown={e => move(e)} \r\n            onKeyUp={e => keyUp(e)}>\r\n            <StyledTetris>\r\n                <Stage stage={stage}/>\r\n                <aside>\r\n                    {gameOver ? (\r\n                        <Display gameOver={gameOver} text='Game Over'/>\r\n                    ) : (\r\n                        <div>\r\n                            <Display text={`Score: ${score}`} />\r\n                            <Display text={`Rows: ${rows}`} />\r\n                            <Display text={`Level: ${level}`} />\r\n                        </div>\r\n                    )}\r\n                    <StartButton callback={startGame} />\r\n\r\n                </aside>\r\n            </StyledTetris>\r\n        </StyledTetrisWrapper>\r\n    )\r\n}\r\n\r\nexport default Tetris","import { useState, useCallback } from 'react'\r\n\r\nimport { randomTetromino, TETROMINOS } from '../tetrominos'\r\nimport { STAGE_WIDTH, checkCollision } from '../gameHelpers'\r\n\r\nexport const usePlayer = () => {\r\n    const [player, setPlayer] = useState({\r\n        pos: {x: 0, y: 0},\r\n        tetromino: TETROMINOS[0].shape,\r\n        collided: false\r\n    })\r\n\r\n    const rotate = (matrix, dir) => {\r\n        // Make the rows to become cols (transpose)\r\n        const rotatedTetro = matrix.map((_, index) => \r\n            matrix.map(col => col[index])\r\n        )\r\n        \r\n        // Reverse each row to get a rotated matrix\r\n        if (dir > 0) {\r\n            return rotatedTetro.map(row => row.reverse())\r\n        } else {\r\n            return rotatedTetro.reverse()\r\n        }\r\n        \r\n    }\r\n\r\n    const playerRotate = (stage, dir) => {\r\n        const clonedPlayer = JSON.parse(JSON.stringify(player))\r\n        clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir)\r\n\r\n        const pos = clonedPlayer.pos.x\r\n        let offset = 1\r\n        while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\r\n            clonedPlayer.pos.x += offset\r\n            offset = -(offset + (offset > 0 ? 1 : -1))\r\n            if (offset > clonedPlayer.tetromino[0].length) {\r\n                rotate(clonedPlayer.tetromino, -dir)\r\n                clonedPlayer.pos.x = pos\r\n                return\r\n            }\r\n        }\r\n\r\n        setPlayer(clonedPlayer)\r\n    }\r\n\r\n    const updatePlayerPos = ({ x, y, collided }) => {\r\n        setPlayer(prev => ({\r\n            ...prev,\r\n            pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\r\n            collided\r\n        }))\r\n    }\r\n\r\n    const resetPlayer = useCallback(() => {\r\n        setPlayer({\r\n            pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\r\n            tetromino: randomTetromino().shape,\r\n            collided: false\r\n        })\r\n    }, [])\r\n\r\n    return [player, updatePlayerPos, resetPlayer, playerRotate]\r\n}","import { useState, useEffect, useCallback } from 'react'\r\n\r\nexport const useGameStatus = rowsCleared => {\r\n    const [score, setScore] = useState(0)\r\n    const [rows, setRows] = useState(0)\r\n    const [level, setLevel] = useState(0)\r\n\r\n    const linePoints = [40, 100, 300, 1200]\r\n\r\n    const calcScore = useCallback(() => {\r\n        // Check if we have score\r\n        if (rowsCleared > 0) {\r\n            // Original Tetris calculation\r\n            setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1))\r\n            setRows(prev => prev + rowsCleared)\r\n        }\r\n    }, [level, linePoints, rowsCleared])\r\n\r\n    useEffect(() => {\r\n        calcScore()\r\n    }, [calcScore, rowsCleared, score])\r\n\r\n    return [score, setScore, rows, setRows, level, setLevel]\r\n}\r\n\r\n","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n","import React from 'react'\r\nimport Tetris from './components/Tetris'\r\n\r\nconst App = () => (\r\n  <div className='App'>\r\n    <Tetris />\r\n  </div>\r\n)\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}